NOW: Should probably do before it hits users
--------------------------------------------

* ctrl-c during stage2 does the 'somthing went wrong!' flow twice

* currently if you get your arguments backwards, your requirements get deleted, replaced with empty dir. this is bad

* acceptance tests:
   * upgrading from A==1.0 to A==2.0 works
   * downgrading "
   * updating while active:
      shutil.Error: `/nail/home/buck/pg/2/virtualenv_run/bin/python` and `virtualenv_run/bin/python` are the same file
   * conflict error message
   * all requirements already satisfied -> "must specify at least one requirement" error


LATER: Things that I want to do, but would put me past my deadline:
------------------------------------------------------------

* coverage: 105, 124, 135, 184, 242, 281, 285-292, 297-298, 326-328, 461, 465

* populate wheels into the cache during build. This would shave 5s off all scenarios.
    see: https://github.com/pypa/pip/issues/2140
    see also: https://github.com/pypa/pip/pull/1572

* On ubuntu stock python2.7 I have to rm -rf $VIRTUAL_ENV/local
    to avoid the AssertionError('unexpected third case')
    https://bitbucket.org/ned/coveragepy/issue/340/keyerror-subpy

* I could remove the --cov-config with a small patch to pytest-cov
    use os.path.abspath(options.cov_config) in postprocess(options)

* coverage.py adds some helpful warnings to stderr, with no way to quiet them.
    there's already an issue (#2 i think?), just needs a patch

* pytest-timeout won't actually time-out with floating-point, zero, or negative input


* Make doubly sure these test scenarios are covered:
   * each of these should behave similarly whether caused by the user
     (mucking between venv-updates) or the requirements file:
       * upgrade
       * downgrade
       * add
       * delete

* pypy support. Some icky subprocess bugs makes it impossible to make not-flakey:
    * https://bitbucket.org/pypy/pypy/issue/1910/fdopen-of-pty-doesnt-match-cpython
    * https://bitbucket.org/pypy/pypy/issue/1912/subprocess-deadlock-in-pypy3

* Go through all my forks/branches and see how close i can get back to master
    some of this stuff has been merged
    wait till March 2014

* pip micro-bug: pip wheel unzips found wheels even with --no-deps

* make a fixture containing the necessary wheels for the enable_coverage function

* somehow avoid the "installing pip, setuptools" on a noop venv-update
    shaves 2-7 seconds off the noop update
    seems to be closer to 7s on osx

* restore the three-pipe subprocess system. I think things would be a lot cleaner.
